CPU architecture
BUILD_ARCH_x86
  Specify for which processor architecture you want to build. You may
  select between x86 (PC), arm, and amd64.


CPU-Types for architecture
CPU
  Specify for which CPU types you want to build code.
  Specify at least one CPU type.

  Supported CPUs for x86 architecture are: 586, 686, K6, K7.
  Supported CPUs for arm architecture are: sa, int.

  You can build for multiple CPU types, the code will be stored in
  different directories.


Build code using API
BUILD_ABI_l4v2
  Specify the version of the Kernel Programming Interface. You may
  select between L4.Fiasco (previously V2) or Linux.


Build for arm architecture
BUILD_SYSTEMS_arm_s
  If you want to build code for the arm architecture, say Y here.

  You can build for multiple architectures, the code will be stored in
  different directories.

  Most users will say N here.

CPU-Types for arm architecture
CPU_arm
  Specify for which arm architecture CPU types you want to build code.
  Specify at least one CPU type. Supported CPUs are: sa.

  You can build for multiple CPU types, the code will be stored in
  different directories.

Build for amd64 architecture
BUILD_SYSTEMS_amd64_s
  If you want to build code for the amd64 architecture, say Y here.

  You can build for multiple architectures, the code will be stored in
  different directories.

  Most users will say N here.

CPU-Types for amd64 architecture
CPU_amd64
  Specify for which amd64 architecture CPU types you want to build code.
  Specify at least one CPU type.

  You can build for multiple CPU types, the code will be stored in
  different directories.
  
Build for ppc32 architecture
BUILD_SYSTEMS_ppc32_s
  If you want to build code for the ppc32 architecture, say Y here.

  You can build for multiple architectures, the code will be stored in
  different directories.

  Most users will say N here.

CPU-Types for ppc32 architecture
CPU_ppc32
  Specify for which ppc32 architecture CPU types you want to build code.
  Specify at least one CPU type.

  You can build for multiple CPU types, the code will be stored in
  different directories.




Build shared libloaders.s.so
BUILD_LOADER
  The "loader" package allows to build a shared library containing
  common libraries of L4Env. To build this shared library, the other
  L4Env libraries must be build in PIC mode, additionally to the
  normal, i.e. non-PIC, mode.
  
  If you want to use the loader, say Y here.


Base directory of the DROPS install tree
DROPS_STDDIR
  This is the directory where the includes, libraries and binaries
  are looked for. On 'make install', files are installed here.
  
  For users at TUD with access to os:/home/drops, this is /home/drops.
  For others, this is usually $(HOME)/src/drops or similar.


Final location of the DROPS install tree
DROPS_INSTDIR
  In case you are installing into a temporary DROPS_STDDIR subdirectory,
  which will be moved later, set DROPS_INSTDIR to this final
  destination.
  
  You will normally use the default setting "$(DROPS_STDDIR)".
  DROPS_INSTDIR is merely used by the daily consitency-check of DROPS.


DDE-2.4 include path
DDE_INCDIR
  This is a space-separated list of paths where the DDE-Linux includes
  can be found.
  
  Upon compilation, the DDE-Linux package installs its header files
  like any other DROPS package into subdirs of $(L4DIR)/include or
  $(DROPS_STDDIR)/include, respectively. This variable lists these
  subdirectories.
  
  Normally, you do not have to change this value.

DDE-2.6 include path
DDE26_INCDIR
  This is a space-separated list of paths where the includes of the
  Linux-2.6 version of the DDE-Linux package (dde_linux26) can be
  found.
  
  Upon compilation, the DDE-Linux 2.6 package installs its header
  files like any other DROPS package into subdirs of $(L4DIR)/include
  or $(DROPS_STDDIR)/include, respectively. This variable lists these
  subdirectories.
  
  Normally, you do not have to change this value.


SDL include path
SDL_INCDIR
  This is a space-separated list of paths where the SDL includes can
  be found.
  
  Upon compilation, the SDL package installs its header files
  like any other DROPS package into subdirs of $(L4DIR)/include or
  $(DROPS_STDDIR)/include, respectively. This variable lists these
  subdirectories.
  
  Normally, you do not have to change this value.


Verbose dependency building
DEPEND_VERBOSE_SWITCH
  If enabled, the commands for dependency-generation will be shown. If
  disabled, DEPEND_VERBOSE is set to '@' to prevent this.

  Most users will say N here.


Verbose compilation and building
VERBOSE_SWITCH
  If enabled, the commands issued for compilation will be shown. If
  disabled, VERBOSE is set to '@' to prevent this.


Short messages for compilation
SHOWMESSAGES
  If enabled, a short textual description for every compilation step
  is printed.

  Most users will say Y here.


Colored build-steps
BID_COLORED_PHASES
  If enabled, significant messages will be printed in color, depending
  on your $TERM setting.


Use special C-Compilers
BIDc_USE_SPECIAL_CC
  If you want to specify specific versions of C and C++ compilers instead
  of using the default ones, enable this option. Defaults are
  "$(SYSTEM_TARGET)gcc" and "$(SYSTEM_TARGET)g++".

  Most users will say N here.

Specific C-Compiler
HOSTCC
  The C compiler to use to generate code for the host system (the one
  you are using currently).

Specific C++-Compiler
HOSTCXX
  The C++ compiler to use to generate code for the host system (the one
  you are using currently).

Specific C-Compiler
CC_x86
  The C compiler to build x86 code.

Specific C++-Compiler
CXX_x86
  The C++ compiler to build x86 code.

Specific C-Compiler
CC_arm
  The C compiler to build arm code.

Specific C++-Compiler
CXX_arm
  The C++ compiler to build arm code.


YACC-name
YACC
  If you would like to use alternative yacc or lex tools, set those names
  here. Defaults are 'byacc' and 'flex'. You can also specify cmdline
  arguments using this option.

LEX-name
LEX
  If you would like to use alternative yacc or lex tools, set those names
  here. Defaults are 'byacc' and 'flex'. You can also specify cmdline
  arguments using this option.

CTAGS-name
CTAGS
  If you would like to use alternative ctags tool, set its name here.
  You may want to at least also specify a recursive option for your ctags
  tool.

ETAGS-name
ETAGS
  If you would like to use alternative etags tool, set its name here.
  You may want to at least also specify a recursive option for your etags
  tool.

System has ld.so
HAVE_LDSO
  If your system provides the dynamic linker ld.so, and this is used
  by your compilers, you should enable this switch. This allows to
  use faster, more flexible and more accurate methods for dependency
  building.
  
  Most Linux-users will say Y here.


Automatically determine C preprocessor names
INT_CPP_NAME_SWITCH
  If you use C-compilers BID does not know so far, there is a chance you
  have to help BID about the names of the C and C++ preprocessors. E.g.,
  gcc tends to change its preprocessor names from subversion to
  subversion, and the dependency tool used by BID wants to know about
  these names.  However, if dependencies are generated well, BID already
  selected the corrects names for you.
  
  Most users will say Y here.


Internal C preprocessor name
INT_CPP_x86_NAME
  The command name of the preprocessor your x86 C compiler uses.
  Note: It is not necessarily the preprocessor as you would invoke it
  from the command line. gcc uses its own internal names.

  For gcc versions prior to gcc 2.95.4 it is 'cpp'.
  gcc verssion 2.95.4 uses 'cpp0'. gcc version 3.2 uses 'cc1'.


Internal C++ preprocessor name
INT_CXX_x86_NAME
  The command name of the preprocessor your x86 C++ compiler uses.
  Note: It is not necessarily the preprocessor as you would invoke it
  from the command line. g++ uses its own internal names.

  For g++ versions prior to gcc 2.95.4 it is 'cpp'.
  gcc verssion 2.95.4 uses 'cpp0'. gcc version 3.2 uses 'cc1plus'.


Internal C preprocessor name
INT_CPP_arm_NAME
  The command name of the preprocessor your arm C compiler uses.
  Note: It is not necessarily the preprocessor as you would invoke it
  from the command line. gcc uses its own internal names.

  For gcc versions prior to gcc 2.95.4 it is 'cpp'.
  gcc verssion 2.95.4 uses 'cpp0'. gcc version 3.2 uses 'cc1'.


Internal C++ preprocessor name
INT_CXX_arm_NAME
  The command name of the preprocessor your arm C++ compiler uses.
  Note: It is not necessarily the preprocessor as you would invoke it
  from the command line. g++ uses its own internal names.

  For g++ versions prior to gcc 2.95.4 it is 'cpp'.
  gcc verssion 2.95.4 uses 'cpp0'. gcc version 3.2 uses 'cc1plus'.


Automatically determine LD names
INT_LD_NAME_SWITCH
  If you use C/C++ compilers BID does not know so far, there is a
  chance you have to help BID about the names of the linker binaries.
  E.g., linker binaries change on cross-compiler environments. The
  dependency tool used by BID wants to know about these names. 
  However, if dependencies are generated well, BID already selected the
  corrects names for you.
  
  Most users will say Y here.

Internal linker name
INT_LD_x86_NAME
  The command name of the linker your x86 C/C++ compiler uses.

Internal linker name
INT_LD_arm_NAME
  The command name of the linker your arm C/C++ compiler uses.

Strip binaries on install
BID_STRIP_PROGS
  If enabled, binaries will be stripped on installation into
  $(L4DIR)/bin or $(DROPS_STDDIR)/bin. If you want to load them with
  all their symbols (eg to show the symbols with the Fiasco kernel
  debugger), say 'N' here.
  
  If unsure, say 'Y'.

Generate gstabs-compatible debug Infos with gcc-3+
BID_GSTAB_SW
  If enabled, gcc will be passed the '-gstabs+' cmdline option. gcc will
  generate debug information in the stabs format, including GNU
  specific extensions.
  
  Enable this option to show the line information in the fiasco kernel
  debugger. Disable BID_STRIP_PROGS then.
  
  You can safely say 'Y' here.

GCC: Omit Frame-pointers
BID_GCC_OMIT_FP

  If enabled, gcc will be passed the '-fomit-frame-pointer' cmdline
  option, adding an additional register to the register set for the
  generated code. Programs will be faster, but backtraces cannot be
  done, seriously hindering debugging.
  
  If unsure, say 'N'.

Generate Map-files for binaries
BID_GENERATE_MAPFILE

  Enabling this option will generate map-files together with the binaries.
  You do not need mapfiles for DROPS to work properly, but you might
  become handy for debugging purposes. See ld(1) for details on mapfiles.
  
  If unsure, say 'N'.

Build system using dietlibc
USE_DIETLIBC
  Uses the dietlibc as the main libc (deprecated).

Build system using uClibc
USE_UCLIBC
  Uses the uClibc as the main libc.

Enable Release flag
RELEASE_FLAG
  This option enables the RELEASE flag possible omitting
  debugging/development code.

Build documentation
BID_BUILD_DOC
  Build documentation.

Build only in l4 directory
BID_BUILD_L4DIR_ONLY
  Only build in l4 directory, no kernel, no dice.

Name for the configuration
CONFIG_LABEL
  Name for the configuration. The build system will also try to include
  a file Makeconf.<label> from the build directory root and the l4 directory
  root.
